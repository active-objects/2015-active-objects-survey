Object: Cover letter for paper: “A Survey of Active Object Languages”

Dear editor and reviewers,The article we submit provides a survey of active-object languages, a programming paradigm inspired from the actor programming model. Actors gained interest in the recent years because it makes the programming of concurrent and distributed systems easier. We call “active object” the adaptation of the actor model to the object-oriented paradigm. Our article reviews the languages that are based at the same time on actor and on objects.

This article gathers the works of several research teams in Europe working in the area, which covers most of the recent results on active objects. Several authors of our article have been designing and implementing active-object for more than 15 years and have a strong experience of the different aspects of design and implementation of programming languages. This article focuses on four of the currently used active-object languages: 
- Rebeca: the closest to pure actor languages, with rich and diverse program analysis tools
- ABS: a relatively recent active object language inheriting from Creol and JCobox, designed as a specification language but proven to be efficient both from an analysis and from an execution point of view.
- ProActive: a Java library implementing the active object paradigm; the ASP calculus is used to reason formally on ProActive. ProActive and ASP have been existing for 15 years but the article also includes recent developments like multi-threaded active objects. ProActive has a reliable support for distributed execution of programs.
- Encore: a quite young language inheriting mostly from Creol and ABS with a strong focus on efficiency for local concurrency. Encore also features promising and original synchronisation patterns well integrated with the active-object paradigms.

The article also covers other actor and active object programming languages but they are presented with less details. The article not only presents the design choices that are made when considering an actor or active object language, it also illustrates the different implementations of the presented languages exhibiting the different ways actor and active object languages can be executed efficiently. The reader will find an overview on the way active-objects can be programmed, on the different analyses that exist for active object languages, and on the efficiency of different implementation of active objects.

The survey is backed up by the strong expertise of the authors on the subject and by the numerous previous paper they have written on the subject. Also, the translation from ABS to ProActive we have implemented and proven last year gave us a reliable insight on the differences between these languages and their common points.

Overall we believe that the research topic is mature enough, and such a survey paper on this subject would be appreciated by the community. We also believe that this article summarises a lot of contributions of our community and will be considered as a reference concerning programming models for concurrent and distributed systems.

Best Regards
Ludovic Henrio